plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.4'
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'io.github.greenstevester'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

repositories {
	mavenCentral()
	maven { url = 'https://repo.spring.io/snapshot' }
	maven { url = 'https://central.sonatype.com/repository/maven-snapshots/' }
}

ext {
	set('springAiVersion', "1.0.0-SNAPSHOT")
}

dependencies {
	// Spring Boot core dependencies
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-configuration-processor'
	
	// Spring AI MCP Server
	implementation 'org.springframework.ai:spring-ai-starter-mcp-server-webmvc'
	
	// MCP WebMVC Transport (required for Spring AI MCP WebMVC)
	implementation 'io.modelcontextprotocol.sdk:mcp-spring-webmvc'
	
	// JSON processing
	implementation 'com.fasterxml.jackson.core:jackson-databind'
	implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
	
	// Utilities
	implementation 'org.apache.commons:commons-lang3:3.18.0'
	implementation 'org.apache.commons:commons-text:1.11.0'
	
	// Markdown processing (for HTML to Markdown conversion)
	implementation 'com.vladsch.flexmark:flexmark-all:0.64.8'
	
	// MacOS native DNS resolver (platform-specific)
	if (System.getProperty("os.name").toLowerCase().contains("mac")) {
		String osArch = System.getProperty("os.arch").toLowerCase()
		if (osArch.contains("aarch64") || osArch.contains("arm")) {
			implementation 'io.netty:netty-resolver-dns-native-macos:4.1.100.Final:osx-aarch_64'
		} else {
			implementation 'io.netty:netty-resolver-dns-native-macos:4.1.100.Final:osx-x86_64'
		}
	}
	
	// Logging
	implementation 'net.logstash.logback:logstash-logback-encoder:7.4'
	
	// Testing
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.mockito', module: 'mockito-core'
		exclude group: 'org.mockito', module: 'mockito-junit-jupiter'
	}
	testImplementation 'org.springframework.boot:spring-boot-testcontainers'
	testImplementation 'io.projectreactor:reactor-test'

	// MCP SDK for integration testing
	testImplementation 'io.modelcontextprotocol.sdk:mcp'
	
	testImplementation 'org.wiremock:wiremock-standalone:3.3.1'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.ai:spring-ai-bom:${springAiVersion}"
	}
}

tasks.named('test') {
	useJUnitPlatform()
}

// Generate build info for Spring Boot
springBoot {
	buildInfo()
}
